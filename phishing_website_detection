{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "75558870",
   "metadata": {
    "papermill": {
     "duration": 0.008154,
     "end_time": "2025-01-29T14:48:06.651490",
     "exception": false,
     "start_time": "2025-01-29T14:48:06.643336",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a47b5440",
   "metadata": {
    "papermill": {
     "duration": 0.007075,
     "end_time": "2025-01-29T14:48:06.666023",
     "exception": false,
     "start_time": "2025-01-29T14:48:06.658948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Importing Necessary Libraries\n",
    "This cell imports all the essential libraries required for the project.\n",
    " - `numpy` and `pandas` are used for data manipulation and preprocessing.\n",
    " - `matplotlib` and `seaborn` are used for data visualization.\n",
    " - `sklearn` provides tools for building and evaluating traditional ML models like Logistic Regression, Random Forest, etc.\n",
    " - Libraries like `torch` and `transformers` will be used for implementing transfer learning models.\n",
    " - Flask will be used to build the web interface for user interaction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d5be6cff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:06.681625Z",
     "iopub.status.busy": "2025-01-29T14:48:06.681359Z",
     "iopub.status.idle": "2025-01-29T14:48:17.891862Z",
     "shell.execute_reply": "2025-01-29T14:48:17.891172Z"
    },
    "papermill": {
     "duration": 11.220144,
     "end_time": "2025-01-29T14:48:17.893313",
     "exception": false,
     "start_time": "2025-01-29T14:48:06.673169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np  # For numerical operations\n",
    "import pandas as pd  # For data manipulation and analysis\n",
    "import matplotlib.pyplot as plt  # For data visualization\n",
    "import seaborn as sns  # For advanced data visualization\n",
    "from sklearn.model_selection import train_test_split  # For splitting datasets\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score  # Evaluation metrics\n",
    "from sklearn.linear_model import LogisticRegression  # Logistic Regression model\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier  # Random Forest and Gradient Boosting models\n",
    "from sklearn.tree import DecisionTreeClassifier  # Decision Tree model\n",
    "import torch  # PyTorch for transfer learning models\n",
    "from transformers import AutoTokenizer, AutoModel  # For using pre-trained transfer learning models\n",
    "from flask import Flask, request, jsonify, render_template  # Flask for the web interface\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "644916c4",
   "metadata": {
    "papermill": {
     "duration": 0.007207,
     "end_time": "2025-01-29T14:48:17.908355",
     "exception": false,
     "start_time": "2025-01-29T14:48:17.901148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Loading Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "621ea8c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:17.923807Z",
     "iopub.status.busy": "2025-01-29T14:48:17.923378Z",
     "iopub.status.idle": "2025-01-29T14:48:18.037480Z",
     "shell.execute_reply": "2025-01-29T14:48:18.036571Z"
    },
    "papermill": {
     "duration": 0.123249,
     "end_time": "2025-01-29T14:48:18.038777",
     "exception": false,
     "start_time": "2025-01-29T14:48:17.915528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Loaded Successfully!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>NumDots</th>\n",
       "      <th>SubdomainLevel</th>\n",
       "      <th>PathLevel</th>\n",
       "      <th>UrlLength</th>\n",
       "      <th>NumDash</th>\n",
       "      <th>NumDashInHostname</th>\n",
       "      <th>AtSymbol</th>\n",
       "      <th>TildeSymbol</th>\n",
       "      <th>NumUnderscore</th>\n",
       "      <th>...</th>\n",
       "      <th>IframeOrFrame</th>\n",
       "      <th>MissingTitle</th>\n",
       "      <th>ImagesOnlyInForm</th>\n",
       "      <th>SubdomainLevelRT</th>\n",
       "      <th>UrlLengthRT</th>\n",
       "      <th>PctExtResourceUrlsRT</th>\n",
       "      <th>AbnormalExtFormActionR</th>\n",
       "      <th>ExtMetaScriptLinkRT</th>\n",
       "      <th>PctExtNullSelfRedirectHyperlinksRT</th>\n",
       "      <th>CLASS_LABEL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>79</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  NumDots  SubdomainLevel  PathLevel  UrlLength  NumDash  \\\n",
       "0   1        3               1          5         72        0   \n",
       "1   2        3               1          3        144        0   \n",
       "2   3        3               1          2         58        0   \n",
       "3   4        3               1          6         79        1   \n",
       "4   5        3               0          4         46        0   \n",
       "\n",
       "   NumDashInHostname  AtSymbol  TildeSymbol  NumUnderscore  ...  \\\n",
       "0                  0         0            0              0  ...   \n",
       "1                  0         0            0              2  ...   \n",
       "2                  0         0            0              0  ...   \n",
       "3                  0         0            0              0  ...   \n",
       "4                  0         0            0              0  ...   \n",
       "\n",
       "   IframeOrFrame  MissingTitle  ImagesOnlyInForm  SubdomainLevelRT  \\\n",
       "0              0             0                 1                 1   \n",
       "1              0             0                 0                 1   \n",
       "2              0             0                 0                 1   \n",
       "3              0             0                 0                 1   \n",
       "4              1             0                 0                 1   \n",
       "\n",
       "   UrlLengthRT  PctExtResourceUrlsRT  AbnormalExtFormActionR  \\\n",
       "0            0                     1                       1   \n",
       "1           -1                     1                       1   \n",
       "2            0                    -1                       1   \n",
       "3           -1                     1                       1   \n",
       "4            1                    -1                       0   \n",
       "\n",
       "   ExtMetaScriptLinkRT  PctExtNullSelfRedirectHyperlinksRT  CLASS_LABEL  \n",
       "0                   -1                                   1            1  \n",
       "1                    1                                   1            1  \n",
       "2                   -1                                   0            1  \n",
       "3                    1                                  -1            1  \n",
       "4                   -1                                  -1            1  \n",
       "\n",
       "[5 rows x 50 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading the Dataset\n",
    "# This cell reads the phishing dataset from the specified CSV file.\n",
    "# The dataset contains information about websites, including features like URL length, \n",
    "# the presence of special characters, etc., and a target column indicating phishing or legitimate status.\n",
    "\n",
    "# Path to the dataset\n",
    "dataset_path = \"/kaggle/input/phishing-dataset-for-machine-learning/Phishing_Legitimate_full.csv\"\n",
    "\n",
    "# Load the dataset into a Pandas DataFrame\n",
    "df = pd.read_csv(dataset_path)\n",
    "\n",
    "# Display the first few rows of the dataset to understand its structure\n",
    "print(\"Dataset Loaded Successfully!\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30dd8338",
   "metadata": {
    "papermill": {
     "duration": 0.007556,
     "end_time": "2025-01-29T14:48:18.054595",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.047039",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## summery of Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6060c2f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.070618Z",
     "iopub.status.busy": "2025-01-29T14:48:18.070370Z",
     "iopub.status.idle": "2025-01-29T14:48:18.094947Z",
     "shell.execute_reply": "2025-01-29T14:48:18.093901Z"
    },
    "papermill": {
     "duration": 0.033961,
     "end_time": "2025-01-29T14:48:18.096162",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.062201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 50 columns):\n",
      " #   Column                              Non-Null Count  Dtype  \n",
      "---  ------                              --------------  -----  \n",
      " 0   id                                  10000 non-null  int64  \n",
      " 1   NumDots                             10000 non-null  int64  \n",
      " 2   SubdomainLevel                      10000 non-null  int64  \n",
      " 3   PathLevel                           10000 non-null  int64  \n",
      " 4   UrlLength                           10000 non-null  int64  \n",
      " 5   NumDash                             10000 non-null  int64  \n",
      " 6   NumDashInHostname                   10000 non-null  int64  \n",
      " 7   AtSymbol                            10000 non-null  int64  \n",
      " 8   TildeSymbol                         10000 non-null  int64  \n",
      " 9   NumUnderscore                       10000 non-null  int64  \n",
      " 10  NumPercent                          10000 non-null  int64  \n",
      " 11  NumQueryComponents                  10000 non-null  int64  \n",
      " 12  NumAmpersand                        10000 non-null  int64  \n",
      " 13  NumHash                             10000 non-null  int64  \n",
      " 14  NumNumericChars                     10000 non-null  int64  \n",
      " 15  NoHttps                             10000 non-null  int64  \n",
      " 16  RandomString                        10000 non-null  int64  \n",
      " 17  IpAddress                           10000 non-null  int64  \n",
      " 18  DomainInSubdomains                  10000 non-null  int64  \n",
      " 19  DomainInPaths                       10000 non-null  int64  \n",
      " 20  HttpsInHostname                     10000 non-null  int64  \n",
      " 21  HostnameLength                      10000 non-null  int64  \n",
      " 22  PathLength                          10000 non-null  int64  \n",
      " 23  QueryLength                         10000 non-null  int64  \n",
      " 24  DoubleSlashInPath                   10000 non-null  int64  \n",
      " 25  NumSensitiveWords                   10000 non-null  int64  \n",
      " 26  EmbeddedBrandName                   10000 non-null  int64  \n",
      " 27  PctExtHyperlinks                    10000 non-null  float64\n",
      " 28  PctExtResourceUrls                  10000 non-null  float64\n",
      " 29  ExtFavicon                          10000 non-null  int64  \n",
      " 30  InsecureForms                       10000 non-null  int64  \n",
      " 31  RelativeFormAction                  10000 non-null  int64  \n",
      " 32  ExtFormAction                       10000 non-null  int64  \n",
      " 33  AbnormalFormAction                  10000 non-null  int64  \n",
      " 34  PctNullSelfRedirectHyperlinks       10000 non-null  float64\n",
      " 35  FrequentDomainNameMismatch          10000 non-null  int64  \n",
      " 36  FakeLinkInStatusBar                 10000 non-null  int64  \n",
      " 37  RightClickDisabled                  10000 non-null  int64  \n",
      " 38  PopUpWindow                         10000 non-null  int64  \n",
      " 39  SubmitInfoToEmail                   10000 non-null  int64  \n",
      " 40  IframeOrFrame                       10000 non-null  int64  \n",
      " 41  MissingTitle                        10000 non-null  int64  \n",
      " 42  ImagesOnlyInForm                    10000 non-null  int64  \n",
      " 43  SubdomainLevelRT                    10000 non-null  int64  \n",
      " 44  UrlLengthRT                         10000 non-null  int64  \n",
      " 45  PctExtResourceUrlsRT                10000 non-null  int64  \n",
      " 46  AbnormalExtFormActionR              10000 non-null  int64  \n",
      " 47  ExtMetaScriptLinkRT                 10000 non-null  int64  \n",
      " 48  PctExtNullSelfRedirectHyperlinksRT  10000 non-null  int64  \n",
      " 49  CLASS_LABEL                         10000 non-null  int64  \n",
      "dtypes: float64(3), int64(47)\n",
      "memory usage: 3.8 MB\n",
      "\n",
      "Target Variable Distribution:\n",
      "CLASS_LABEL\n",
      "1    5000\n",
      "0    5000\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Dataset Summary and Basic Information\n",
    "# This cell provides a summary of the dataset, including column names, data types, \n",
    "# missing values, and basic statistics. This helps to understand the dataset and identify any preprocessing needs.\n",
    "\n",
    "# Display basic information about the dataset\n",
    "print(\"Dataset Info:\")\n",
    "df.info()\n",
    "\n",
    "# Display the distribution of the target variable\n",
    "print(\"\\nTarget Variable Distribution:\")\n",
    "print(df['CLASS_LABEL'].value_counts())  # Replace 'CLASS_LABEL' with the actual name of the target column if different\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a130fb45",
   "metadata": {
    "papermill": {
     "duration": 0.007603,
     "end_time": "2025-01-29T14:48:18.111459",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.103856",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Features Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dfb833c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.127628Z",
     "iopub.status.busy": "2025-01-29T14:48:18.127417Z",
     "iopub.status.idle": "2025-01-29T14:48:18.133817Z",
     "shell.execute_reply": "2025-01-29T14:48:18.133142Z"
    },
    "papermill": {
     "duration": 0.015706,
     "end_time": "2025-01-29T14:48:18.134919",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.119213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns after dropping unnecessary ones:\n",
      "Index(['NumDots', 'SubdomainLevel', 'PathLevel', 'UrlLength', 'NumDash',\n",
      "       'NumDashInHostname', 'AtSymbol', 'TildeSymbol', 'NumUnderscore',\n",
      "       'NumPercent', 'NumQueryComponents', 'NumAmpersand', 'NumHash',\n",
      "       'NumNumericChars', 'NoHttps', 'RandomString', 'IpAddress',\n",
      "       'DomainInSubdomains', 'DomainInPaths', 'HttpsInHostname',\n",
      "       'HostnameLength', 'PathLength', 'QueryLength', 'DoubleSlashInPath',\n",
      "       'NumSensitiveWords', 'EmbeddedBrandName', 'PctExtHyperlinks',\n",
      "       'PctExtResourceUrls', 'ExtFavicon', 'InsecureForms',\n",
      "       'RelativeFormAction', 'ExtFormAction', 'AbnormalFormAction',\n",
      "       'PctNullSelfRedirectHyperlinks', 'FrequentDomainNameMismatch',\n",
      "       'FakeLinkInStatusBar', 'RightClickDisabled', 'PopUpWindow',\n",
      "       'SubmitInfoToEmail', 'IframeOrFrame', 'MissingTitle',\n",
      "       'ImagesOnlyInForm', 'SubdomainLevelRT', 'UrlLengthRT',\n",
      "       'PctExtResourceUrlsRT', 'AbnormalExtFormActionR', 'ExtMetaScriptLinkRT',\n",
      "       'PctExtNullSelfRedirectHyperlinksRT', 'CLASS_LABEL'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Dropping Unnecessary Columns\n",
    "# The `id` column is just an identifier and does not contribute to the prediction task.\n",
    "# We drop it to keep only meaningful features.\n",
    "\n",
    "# Drop the 'id' column\n",
    "df = df.drop(columns=['id'])\n",
    "\n",
    "print(\"Columns after dropping unnecessary ones:\")\n",
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6325672c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.151044Z",
     "iopub.status.busy": "2025-01-29T14:48:18.150806Z",
     "iopub.status.idle": "2025-01-29T14:48:18.156164Z",
     "shell.execute_reply": "2025-01-29T14:48:18.155503Z"
    },
    "papermill": {
     "duration": 0.014549,
     "end_time": "2025-01-29T14:48:18.157254",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.142705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features Shape: (10000, 48)\n",
      "Target Shape: (10000,)\n"
     ]
    }
   ],
   "source": [
    "# Feature Selection and Target Encoding\n",
    "# This cell separates features from the target variable and encodes the target column \n",
    "# into a format suitable for machine learning models (e.g., 0 for Legitimate, 1 for Phishing).\n",
    "\n",
    "# Define the target column (update 'CLASS_LABEL' with the actual target column name)\n",
    "target_column = 'CLASS_LABEL'\n",
    "\n",
    "# Encode the target column (e.g., Legitimate -> 0, Phishing -> 1)\n",
    "#df[target_column] = df[target_column].apply(lambda x: 1 if x == 'Phishing' else 0)\n",
    "\n",
    "# Separate features (X) and target (y)\n",
    "X = df.drop(columns=[target_column])  # All columns except the target\n",
    "y = df[target_column]  # Target column\n",
    "\n",
    "# Verify the separation\n",
    "print(\"Features Shape:\", X.shape)\n",
    "print(\"Target Shape:\", y.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "279eb654",
   "metadata": {
    "papermill": {
     "duration": 0.007485,
     "end_time": "2025-01-29T14:48:18.172727",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.165242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Splitting the data set into Training and Testing dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5f0cdbac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.188868Z",
     "iopub.status.busy": "2025-01-29T14:48:18.188650Z",
     "iopub.status.idle": "2025-01-29T14:48:18.202128Z",
     "shell.execute_reply": "2025-01-29T14:48:18.201487Z"
    },
    "papermill": {
     "duration": 0.02286,
     "end_time": "2025-01-29T14:48:18.203331",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.180471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Set Shape: (8000, 48) (8000,)\n",
      "Test Set Shape: (2000, 48) (2000,)\n"
     ]
    }
   ],
   "source": [
    "# Splitting the Dataset into Training and Test Sets\n",
    "# This cell splits the dataset into training and test sets for model training and evaluation.\n",
    "# The training set is used to train the models, while the test set is used for final evaluation.\n",
    "\n",
    "# Split the dataset into training (80%) and test (20%) sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Display the shapes of the resulting splits\n",
    "print(\"Training Set Shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test Set Shape:\", X_test.shape, y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3a817757",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.220042Z",
     "iopub.status.busy": "2025-01-29T14:48:18.219798Z",
     "iopub.status.idle": "2025-01-29T14:48:18.225636Z",
     "shell.execute_reply": "2025-01-29T14:48:18.224572Z"
    },
    "papermill": {
     "duration": 0.015491,
     "end_time": "2025-01-29T14:48:18.226892",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.211401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Set Class Distribution:\n",
      "CLASS_LABEL\n",
      "0    4000\n",
      "1    4000\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Testing Set Class Distribution:\n",
      "CLASS_LABEL\n",
      "0    1000\n",
      "1    1000\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check class distribution in the training set\n",
    "print(\"Training Set Class Distribution:\")\n",
    "print(y_train.value_counts())\n",
    "\n",
    "# Check class distribution in the testing set\n",
    "print(\"\\nTesting Set Class Distribution:\")\n",
    "print(y_test.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eca4724",
   "metadata": {
    "papermill": {
     "duration": 0.007905,
     "end_time": "2025-01-29T14:48:18.243590",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.235685",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logestic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7e4feec",
   "metadata": {
    "papermill": {
     "duration": 0.008167,
     "end_time": "2025-01-29T14:48:18.259829",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.251662",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d9d150d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:18.276637Z",
     "iopub.status.busy": "2025-01-29T14:48:18.276433Z",
     "iopub.status.idle": "2025-01-29T14:48:18.986561Z",
     "shell.execute_reply": "2025-01-29T14:48:18.985359Z"
    },
    "papermill": {
     "duration": 0.720064,
     "end_time": "2025-01-29T14:48:18.987924",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.267860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=1000, random_state=42)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Logistic Regression Model Training and Evaluation\n",
    "# This cell trains a Logistic Regression model on the training dataset\n",
    "# and evaluates it on the test dataset using various classification metrics.\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n",
    "\n",
    "# Initialize the Logistic Regression model\n",
    "log_reg = LogisticRegression(random_state=42, max_iter=1000)\n",
    "\n",
    "# Train the model\n",
    "log_reg.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61e340fd",
   "metadata": {
    "papermill": {
     "duration": 0.008084,
     "end_time": "2025-01-29T14:48:19.004695",
     "exception": false,
     "start_time": "2025-01-29T14:48:18.996611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Evaluation Metrics for Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4ec6b49f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:19.022107Z",
     "iopub.status.busy": "2025-01-29T14:48:19.021833Z",
     "iopub.status.idle": "2025-01-29T14:48:19.037347Z",
     "shell.execute_reply": "2025-01-29T14:48:19.036592Z"
    },
    "papermill": {
     "duration": 0.02555,
     "end_time": "2025-01-29T14:48:19.038492",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.012942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for Logistic Regression:\n",
      "Accuracy: 0.9510\n",
      "Precision: 0.9457\n",
      "Recall: 0.9570\n",
      "F1 Score: 0.9513\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred = log_reg.predict(X_test)\n",
    "\n",
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for Logistic Regression:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision = precision_score(y_test, y_pred)\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall = recall_score(y_test, y_pred)\n",
    "print(f\"Recall: {recall:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "print(f\"F1 Score: {f1:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0d94f8d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:19.055913Z",
     "iopub.status.busy": "2025-01-29T14:48:19.055676Z",
     "iopub.status.idle": "2025-01-29T14:48:19.065806Z",
     "shell.execute_reply": "2025-01-29T14:48:19.064866Z"
    },
    "papermill": {
     "duration": 0.020369,
     "end_time": "2025-01-29T14:48:19.067188",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.046819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.94      0.95      1000\n",
      "           1       0.95      0.96      0.95      1000\n",
      "\n",
      "    accuracy                           0.95      2000\n",
      "   macro avg       0.95      0.95      0.95      2000\n",
      "weighted avg       0.95      0.95      0.95      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "14ca4e63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:19.084366Z",
     "iopub.status.busy": "2025-01-29T14:48:19.084165Z",
     "iopub.status.idle": "2025-01-29T14:48:19.309126Z",
     "shell.execute_reply": "2025-01-29T14:48:19.308417Z"
    },
    "papermill": {
     "duration": 0.235092,
     "end_time": "2025-01-29T14:48:19.310496",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.075404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[945  55]\n",
      " [ 43 957]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for Logistic Regression')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38ab971f",
   "metadata": {
    "papermill": {
     "duration": 0.008804,
     "end_time": "2025-01-29T14:48:19.328501",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.319697",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c1d6474c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:19.347259Z",
     "iopub.status.busy": "2025-01-29T14:48:19.347021Z",
     "iopub.status.idle": "2025-01-29T14:48:19.984521Z",
     "shell.execute_reply": "2025-01-29T14:48:19.983670Z"
    },
    "papermill": {
     "duration": 0.648574,
     "end_time": "2025-01-29T14:48:19.985939",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.337365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Random Forest Model Training and Evaluation\n",
    "# This cell trains a Random Forest model and evaluates its performance on the test dataset.\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n",
    "\n",
    "# Initialize the Random Forest Classifier\n",
    "random_forest = RandomForestClassifier(random_state=42, n_estimators=100)\n",
    "\n",
    "# Train the model\n",
    "random_forest.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8c6e9b8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.005600Z",
     "iopub.status.busy": "2025-01-29T14:48:20.005351Z",
     "iopub.status.idle": "2025-01-29T14:48:20.046210Z",
     "shell.execute_reply": "2025-01-29T14:48:20.045418Z"
    },
    "papermill": {
     "duration": 0.051845,
     "end_time": "2025-01-29T14:48:20.047537",
     "exception": false,
     "start_time": "2025-01-29T14:48:19.995692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for Random Forest:\n",
      "Accuracy: 0.9855\n",
      "Precision: 0.9860\n",
      "Recall: 0.9850\n",
      "F1 Score: 0.9855\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred_rf = random_forest.predict(X_test)\n",
    "\n",
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for Random Forest:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
    "print(f\"Accuracy: {accuracy_rf:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision_rf = precision_score(y_test, y_pred_rf)\n",
    "print(f\"Precision: {precision_rf:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall_rf = recall_score(y_test, y_pred_rf)\n",
    "print(f\"Recall: {recall_rf:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1_rf = f1_score(y_test, y_pred_rf)\n",
    "print(f\"F1 Score: {f1_rf:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cecd21bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.066806Z",
     "iopub.status.busy": "2025-01-29T14:48:20.066592Z",
     "iopub.status.idle": "2025-01-29T14:48:20.077097Z",
     "shell.execute_reply": "2025-01-29T14:48:20.076365Z"
    },
    "papermill": {
     "duration": 0.021441,
     "end_time": "2025-01-29T14:48:20.078225",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.056784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.99      0.99      1000\n",
      "           1       0.99      0.98      0.99      1000\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d8737de2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.097380Z",
     "iopub.status.busy": "2025-01-29T14:48:20.097173Z",
     "iopub.status.idle": "2025-01-29T14:48:20.258299Z",
     "shell.execute_reply": "2025-01-29T14:48:20.257615Z"
    },
    "papermill": {
     "duration": 0.172264,
     "end_time": "2025-01-29T14:48:20.259674",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.087410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[986  14]\n",
      " [ 15 985]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix_rf)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_rf, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for Random Forest')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e18a4ae",
   "metadata": {
    "papermill": {
     "duration": 0.009783,
     "end_time": "2025-01-29T14:48:20.279538",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.269755",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "90fd298e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.300074Z",
     "iopub.status.busy": "2025-01-29T14:48:20.299808Z",
     "iopub.status.idle": "2025-01-29T14:48:20.364963Z",
     "shell.execute_reply": "2025-01-29T14:48:20.364205Z"
    },
    "papermill": {
     "duration": 0.077001,
     "end_time": "2025-01-29T14:48:20.366314",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.289313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(random_state=42)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Tree Model Training and Evaluation\n",
    "# This cell trains a Decision Tree model and evaluates its performance on the test dataset.\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n",
    "\n",
    "# Initialize the Decision Tree Classifier\n",
    "decision_tree = DecisionTreeClassifier(random_state=42)\n",
    "\n",
    "# Train the model\n",
    "decision_tree.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5cfc905f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.387557Z",
     "iopub.status.busy": "2025-01-29T14:48:20.387309Z",
     "iopub.status.idle": "2025-01-29T14:48:20.402160Z",
     "shell.execute_reply": "2025-01-29T14:48:20.401413Z"
    },
    "papermill": {
     "duration": 0.026924,
     "end_time": "2025-01-29T14:48:20.403409",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.376485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for Decision Tree:\n",
      "Accuracy: 0.9640\n",
      "Precision: 0.9612\n",
      "Recall: 0.9670\n",
      "F1 Score: 0.9641\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred_dt = decision_tree.predict(X_test)\n",
    "\n",
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for Decision Tree:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
    "print(f\"Accuracy: {accuracy_dt:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision_dt = precision_score(y_test, y_pred_dt)\n",
    "print(f\"Precision: {precision_dt:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall_dt = recall_score(y_test, y_pred_dt)\n",
    "print(f\"Recall: {recall_dt:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1_dt = f1_score(y_test, y_pred_dt)\n",
    "print(f\"F1 Score: {f1_dt:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3278704e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.423774Z",
     "iopub.status.busy": "2025-01-29T14:48:20.423556Z",
     "iopub.status.idle": "2025-01-29T14:48:20.433757Z",
     "shell.execute_reply": "2025-01-29T14:48:20.433104Z"
    },
    "papermill": {
     "duration": 0.021596,
     "end_time": "2025-01-29T14:48:20.434896",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.413300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.96      1000\n",
      "           1       0.96      0.97      0.96      1000\n",
      "\n",
      "    accuracy                           0.96      2000\n",
      "   macro avg       0.96      0.96      0.96      2000\n",
      "weighted avg       0.96      0.96      0.96      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3f520a38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.458200Z",
     "iopub.status.busy": "2025-01-29T14:48:20.457869Z",
     "iopub.status.idle": "2025-01-29T14:48:20.662462Z",
     "shell.execute_reply": "2025-01-29T14:48:20.661366Z"
    },
    "papermill": {
     "duration": 0.21903,
     "end_time": "2025-01-29T14:48:20.663872",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.444842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[961  39]\n",
      " [ 33 967]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix_dt = confusion_matrix(y_test, y_pred_dt)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix_dt)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_dt, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for Decision Tree')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c21d0aa",
   "metadata": {
    "papermill": {
     "duration": 0.013426,
     "end_time": "2025-01-29T14:48:20.690116",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.676690",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0939e465",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:20.713224Z",
     "iopub.status.busy": "2025-01-29T14:48:20.712897Z",
     "iopub.status.idle": "2025-01-29T14:48:22.217217Z",
     "shell.execute_reply": "2025-01-29T14:48:22.216387Z"
    },
    "papermill": {
     "duration": 1.51789,
     "end_time": "2025-01-29T14:48:22.218716",
     "exception": false,
     "start_time": "2025-01-29T14:48:20.700826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingClassifier</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingClassifier(random_state=42)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gradient Boosting Model Training and Evaluation\n",
    "# This cell trains a Gradient Boosting model and evaluates its performance on the test dataset.\n",
    "\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n",
    "\n",
    "# Initialize the Gradient Boosting Classifier\n",
    "gradient_boosting = GradientBoostingClassifier(random_state=42, n_estimators=100, learning_rate=0.1, max_depth=3)\n",
    "\n",
    "# Train the model\n",
    "gradient_boosting.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "97f75ded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:22.242357Z",
     "iopub.status.busy": "2025-01-29T14:48:22.242093Z",
     "iopub.status.idle": "2025-01-29T14:48:22.261673Z",
     "shell.execute_reply": "2025-01-29T14:48:22.260886Z"
    },
    "papermill": {
     "duration": 0.032073,
     "end_time": "2025-01-29T14:48:22.262929",
     "exception": false,
     "start_time": "2025-01-29T14:48:22.230856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for Gradient Boosting:\n",
      "Accuracy: 0.9790\n",
      "Precision: 0.9809\n",
      "Recall: 0.9770\n",
      "F1 Score: 0.9790\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred_gb = gradient_boosting.predict(X_test)\n",
    "\n",
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for Gradient Boosting:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy_gb = accuracy_score(y_test, y_pred_gb)\n",
    "print(f\"Accuracy: {accuracy_gb:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision_gb = precision_score(y_test, y_pred_gb)\n",
    "print(f\"Precision: {precision_gb:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall_gb = recall_score(y_test, y_pred_gb)\n",
    "print(f\"Recall: {recall_gb:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1_gb = f1_score(y_test, y_pred_gb)\n",
    "print(f\"F1 Score: {f1_gb:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "61e4e08c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:22.285312Z",
     "iopub.status.busy": "2025-01-29T14:48:22.285053Z",
     "iopub.status.idle": "2025-01-29T14:48:22.296264Z",
     "shell.execute_reply": "2025-01-29T14:48:22.295187Z"
    },
    "papermill": {
     "duration": 0.023901,
     "end_time": "2025-01-29T14:48:22.297618",
     "exception": false,
     "start_time": "2025-01-29T14:48:22.273717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98      1000\n",
      "           1       0.98      0.98      0.98      1000\n",
      "\n",
      "    accuracy                           0.98      2000\n",
      "   macro avg       0.98      0.98      0.98      2000\n",
      "weighted avg       0.98      0.98      0.98      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred_gb))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6aaa1ff1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:22.321374Z",
     "iopub.status.busy": "2025-01-29T14:48:22.321141Z",
     "iopub.status.idle": "2025-01-29T14:48:22.482323Z",
     "shell.execute_reply": "2025-01-29T14:48:22.481440Z"
    },
    "papermill": {
     "duration": 0.174393,
     "end_time": "2025-01-29T14:48:22.483665",
     "exception": false,
     "start_time": "2025-01-29T14:48:22.309272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[981  19]\n",
      " [ 23 977]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix_gb = confusion_matrix(y_test, y_pred_gb)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix_gb)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_gb, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for Gradient Boosting')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a565e017",
   "metadata": {
    "papermill": {
     "duration": 0.011812,
     "end_time": "2025-01-29T14:48:22.507897",
     "exception": false,
     "start_time": "2025-01-29T14:48:22.496085",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Transfer Learning Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e2be8a7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:22.533023Z",
     "iopub.status.busy": "2025-01-29T14:48:22.532757Z",
     "iopub.status.idle": "2025-01-29T14:48:26.933027Z",
     "shell.execute_reply": "2025-01-29T14:48:26.932143Z"
    },
    "papermill": {
     "duration": 4.414765,
     "end_time": "2025-01-29T14:48:26.934735",
     "exception": false,
     "start_time": "2025-01-29T14:48:22.519970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pytorch-tabnet\r\n",
      "  Downloading pytorch_tabnet-4.1.0-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.26.4)\r\n",
      "Requirement already satisfied: scikit_learn>0.21 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.2.2)\r\n",
      "Requirement already satisfied: scipy>1.4 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (1.13.1)\r\n",
      "Requirement already satisfied: torch>=1.3 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (2.5.1+cu121)\r\n",
      "Requirement already satisfied: tqdm>=4.36 in /usr/local/lib/python3.10/dist-packages (from pytorch-tabnet) (4.67.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->pytorch-tabnet) (2.4.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit_learn>0.21->pytorch-tabnet) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit_learn>0.21->pytorch-tabnet) (3.5.0)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.16.1)\r\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (4.12.2)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.4.2)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (3.1.4)\r\n",
      "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (2024.9.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.3->pytorch-tabnet) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch>=1.3->pytorch-tabnet) (1.3.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.3->pytorch-tabnet) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->pytorch-tabnet) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->pytorch-tabnet) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->pytorch-tabnet) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17->pytorch-tabnet) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17->pytorch-tabnet) (2024.2.0)\r\n",
      "Downloading pytorch_tabnet-4.1.0-py3-none-any.whl (44 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.5/44.5 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: pytorch-tabnet\r\n",
      "Successfully installed pytorch-tabnet-4.1.0\r\n"
     ]
    }
   ],
   "source": [
    "# Install necessary libraries for transfer learning models\n",
    "# Uncomment these lines if the libraries are not already installed in your environment.\n",
    "\n",
    "!pip install pytorch-tabnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b3a34bfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:26.960133Z",
     "iopub.status.busy": "2025-01-29T14:48:26.959783Z",
     "iopub.status.idle": "2025-01-29T14:48:30.181331Z",
     "shell.execute_reply": "2025-01-29T14:48:30.180161Z"
    },
    "papermill": {
     "duration": 3.235727,
     "end_time": "2025-01-29T14:48:30.182960",
     "exception": false,
     "start_time": "2025-01-29T14:48:26.947233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: catboost in /usr/local/lib/python3.10/dist-packages (1.2.7)\r\n",
      "Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.5)\r\n",
      "Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\r\n",
      "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\r\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\r\n",
      "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.17.0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<2.0,>=1.16.0->catboost) (2.4.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\r\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<2.0,>=1.16.0->catboost) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<2.0,>=1.16.0->catboost) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<2.0,>=1.16.0->catboost) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<2.0,>=1.16.0->catboost) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<2.0,>=1.16.0->catboost) (2024.2.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "15bbee6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:30.208404Z",
     "iopub.status.busy": "2025-01-29T14:48:30.208133Z",
     "iopub.status.idle": "2025-01-29T14:48:33.534877Z",
     "shell.execute_reply": "2025-01-29T14:48:33.533965Z"
    },
    "papermill": {
     "duration": 3.341556,
     "end_time": "2025-01-29T14:48:33.537051",
     "exception": false,
     "start_time": "2025-01-29T14:48:30.195495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.47.0)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.16.1)\r\n",
      "Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.27.0)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.2)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\r\n",
      "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.21.0)\r\n",
      "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.67.1)\r\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (2024.9.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (4.12.2)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17->transformers) (2.4.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4.0)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.2.3)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.12.14)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17->transformers) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install transformers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b7219cd",
   "metadata": {
    "papermill": {
     "duration": 0.011763,
     "end_time": "2025-01-29T14:48:33.561296",
     "exception": false,
     "start_time": "2025-01-29T14:48:33.549533",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Tabnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3f2c397e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:33.587262Z",
     "iopub.status.busy": "2025-01-29T14:48:33.586921Z",
     "iopub.status.idle": "2025-01-29T14:48:44.199808Z",
     "shell.execute_reply": "2025-01-29T14:48:44.198795Z"
    },
    "papermill": {
     "duration": 10.628163,
     "end_time": "2025-01-29T14:48:44.201387",
     "exception": false,
     "start_time": "2025-01-29T14:48:33.573224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/pytorch_tabnet/abstract_model.py:82: UserWarning: Device used : cuda\n",
      "  warnings.warn(f\"Device used : {self.device}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 0  | loss: 0.76404 | validation_accuracy: 0.514   |  0:00:01s\n",
      "epoch 1  | loss: 0.6156  | validation_accuracy: 0.6005  |  0:00:01s\n",
      "epoch 2  | loss: 0.53327 | validation_accuracy: 0.59    |  0:00:01s\n",
      "epoch 3  | loss: 0.44062 | validation_accuracy: 0.5575  |  0:00:02s\n",
      "epoch 4  | loss: 0.40084 | validation_accuracy: 0.6425  |  0:00:02s\n",
      "epoch 5  | loss: 0.36385 | validation_accuracy: 0.6265  |  0:00:02s\n",
      "epoch 6  | loss: 0.34424 | validation_accuracy: 0.6895  |  0:00:03s\n",
      "epoch 7  | loss: 0.32063 | validation_accuracy: 0.782   |  0:00:03s\n",
      "epoch 8  | loss: 0.28638 | validation_accuracy: 0.8245  |  0:00:03s\n",
      "epoch 9  | loss: 0.28548 | validation_accuracy: 0.879   |  0:00:04s\n",
      "epoch 10 | loss: 0.26086 | validation_accuracy: 0.8815  |  0:00:04s\n",
      "epoch 11 | loss: 0.23991 | validation_accuracy: 0.879   |  0:00:04s\n",
      "epoch 12 | loss: 0.22585 | validation_accuracy: 0.891   |  0:00:04s\n",
      "epoch 13 | loss: 0.21667 | validation_accuracy: 0.849   |  0:00:05s\n",
      "epoch 14 | loss: 0.2139  | validation_accuracy: 0.898   |  0:00:05s\n",
      "epoch 15 | loss: 0.20104 | validation_accuracy: 0.9045  |  0:00:05s\n",
      "epoch 16 | loss: 0.19205 | validation_accuracy: 0.9215  |  0:00:06s\n",
      "epoch 17 | loss: 0.17737 | validation_accuracy: 0.9125  |  0:00:06s\n",
      "epoch 18 | loss: 0.18682 | validation_accuracy: 0.91    |  0:00:06s\n",
      "epoch 19 | loss: 0.17451 | validation_accuracy: 0.91    |  0:00:07s\n",
      "epoch 20 | loss: 0.17568 | validation_accuracy: 0.9105  |  0:00:07s\n",
      "epoch 21 | loss: 0.17477 | validation_accuracy: 0.9295  |  0:00:07s\n",
      "epoch 22 | loss: 0.16305 | validation_accuracy: 0.8875  |  0:00:07s\n",
      "epoch 23 | loss: 0.16905 | validation_accuracy: 0.9285  |  0:00:08s\n",
      "epoch 24 | loss: 0.16791 | validation_accuracy: 0.9365  |  0:00:08s\n",
      "epoch 25 | loss: 0.18437 | validation_accuracy: 0.9255  |  0:00:08s\n",
      "epoch 26 | loss: 0.17553 | validation_accuracy: 0.9355  |  0:00:09s\n",
      "epoch 27 | loss: 0.17504 | validation_accuracy: 0.9365  |  0:00:09s\n",
      "epoch 28 | loss: 0.15924 | validation_accuracy: 0.9315  |  0:00:09s\n",
      "epoch 29 | loss: 0.15483 | validation_accuracy: 0.914   |  0:00:10s\n",
      "\n",
      "Early stopping occurred at epoch 29 with best_epoch = 24 and best_validation_accuracy = 0.9365\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!\n",
      "  warnings.warn(wrn_msg)\n"
     ]
    }
   ],
   "source": [
    "# TabNet Implementation\n",
    "# This cell trains a TabNetClassifier on the phishing dataset.\n",
    "\n",
    "from pytorch_tabnet.tab_model import TabNetClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "import numpy as np\n",
    "\n",
    "# Prepare data for TabNet (convert to NumPy arrays)\n",
    "X_train_np = X_train.values\n",
    "X_test_np = X_test.values\n",
    "y_train_np = y_train.values\n",
    "y_test_np = y_test.values\n",
    "\n",
    "# Initialize TabNet Classifier\n",
    "tabnet_model = TabNetClassifier(seed=42)\n",
    "\n",
    "# Train the TabNet model\n",
    "tabnet_model.fit(\n",
    "    X_train_np, y_train_np,\n",
    "    eval_set=[(X_test_np, y_test_np)],\n",
    "    eval_name=[\"validation\"],\n",
    "    eval_metric=[\"accuracy\"],\n",
    "    max_epochs=50,\n",
    "    patience=5,\n",
    "    batch_size=1024,\n",
    "    virtual_batch_size=128\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b20e3da9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:44.229762Z",
     "iopub.status.busy": "2025-01-29T14:48:44.229505Z",
     "iopub.status.idle": "2025-01-29T14:48:44.279493Z",
     "shell.execute_reply": "2025-01-29T14:48:44.278665Z"
    },
    "papermill": {
     "duration": 0.065358,
     "end_time": "2025-01-29T14:48:44.280737",
     "exception": false,
     "start_time": "2025-01-29T14:48:44.215379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TabNet Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.96      0.94      1000\n",
      "           1       0.96      0.91      0.93      1000\n",
      "\n",
      "    accuracy                           0.94      2000\n",
      "   macro avg       0.94      0.94      0.94      2000\n",
      "weighted avg       0.94      0.94      0.94      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Make predictions\n",
    "y_pred_tabnet = tabnet_model.predict(X_test_np)\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"TabNet Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_tabnet))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ac23078e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:44.308675Z",
     "iopub.status.busy": "2025-01-29T14:48:44.308457Z",
     "iopub.status.idle": "2025-01-29T14:48:44.320780Z",
     "shell.execute_reply": "2025-01-29T14:48:44.319970Z"
    },
    "papermill": {
     "duration": 0.027804,
     "end_time": "2025-01-29T14:48:44.322165",
     "exception": false,
     "start_time": "2025-01-29T14:48:44.294361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for Tabnet:\n",
      "Accuracy: 0.9365\n",
      "Precision: 0.9619\n",
      "Recall: 0.9090\n",
      "F1 Score: 0.9347\n"
     ]
    }
   ],
   "source": [
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for Tabnet:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy_tabnet = accuracy_score(y_test, y_pred_tabnet)\n",
    "print(f\"Accuracy: {accuracy_tabnet:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision_tabnet = precision_score(y_test, y_pred_tabnet)\n",
    "print(f\"Precision: {precision_tabnet:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall_tabnet = recall_score(y_test, y_pred_tabnet)\n",
    "print(f\"Recall: {recall_tabnet:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1_tabnet = f1_score(y_test, y_pred_tabnet)\n",
    "print(f\"F1 Score: {f1_tabnet:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e1d179bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:44.350436Z",
     "iopub.status.busy": "2025-01-29T14:48:44.350230Z",
     "iopub.status.idle": "2025-01-29T14:48:44.728863Z",
     "shell.execute_reply": "2025-01-29T14:48:44.728001Z"
    },
    "papermill": {
     "duration": 0.393674,
     "end_time": "2025-01-29T14:48:44.730041",
     "exception": false,
     "start_time": "2025-01-29T14:48:44.336367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[964  36]\n",
      " [ 91 909]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix_tabnet = confusion_matrix(y_test, y_pred_tabnet)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix_tabnet)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_tabnet, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for Tabnet')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "988253ae",
   "metadata": {
    "papermill": {
     "duration": 0.013745,
     "end_time": "2025-01-29T14:48:44.758314",
     "exception": false,
     "start_time": "2025-01-29T14:48:44.744569",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## CatBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9519f74f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:44.787355Z",
     "iopub.status.busy": "2025-01-29T14:48:44.787092Z",
     "iopub.status.idle": "2025-01-29T14:48:53.551933Z",
     "shell.execute_reply": "2025-01-29T14:48:53.550903Z"
    },
    "papermill": {
     "duration": 8.781022,
     "end_time": "2025-01-29T14:48:53.553399",
     "exception": false,
     "start_time": "2025-01-29T14:48:44.772377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\tlearn: 0.5279893\ttotal: 74.3ms\tremaining: 37.1s\n",
      "100:\tlearn: 0.0157040\ttotal: 1.66s\tremaining: 6.57s\n",
      "200:\tlearn: 0.0080200\ttotal: 3.25s\tremaining: 4.84s\n",
      "300:\tlearn: 0.0066125\ttotal: 4.81s\tremaining: 3.18s\n",
      "400:\tlearn: 0.0055122\ttotal: 6.38s\tremaining: 1.58s\n",
      "499:\tlearn: 0.0052938\ttotal: 8.2s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x7ab0e4f93970>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CatBoost with Pre-training\n",
    "# This cell demonstrates using CatBoost with pre-training for phishing detection.\n",
    "\n",
    "from catboost import CatBoostClassifier\n",
    "\n",
    "# Initialize the CatBoost Classifier\n",
    "catboost_model = CatBoostClassifier(iterations=500, learning_rate=0.1, depth=10, random_seed=42)\n",
    "\n",
    "# Train the CatBoost model\n",
    "catboost_model.fit(X_train, y_train, verbose=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "47e31037",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:53.583528Z",
     "iopub.status.busy": "2025-01-29T14:48:53.583294Z",
     "iopub.status.idle": "2025-01-29T14:48:53.601840Z",
     "shell.execute_reply": "2025-01-29T14:48:53.600930Z"
    },
    "papermill": {
     "duration": 0.03488,
     "end_time": "2025-01-29T14:48:53.603211",
     "exception": false,
     "start_time": "2025-01-29T14:48:53.568331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoost Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.98      0.99      1000\n",
      "           1       0.98      0.99      0.99      1000\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Make predictions\n",
    "y_pred_catboost = catboost_model.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"CatBoost Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_catboost))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c9bc84a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:53.633712Z",
     "iopub.status.busy": "2025-01-29T14:48:53.633411Z",
     "iopub.status.idle": "2025-01-29T14:48:53.650665Z",
     "shell.execute_reply": "2025-01-29T14:48:53.649877Z"
    },
    "papermill": {
     "duration": 0.034219,
     "end_time": "2025-01-29T14:48:53.652245",
     "exception": false,
     "start_time": "2025-01-29T14:48:53.618026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluation Metrics for CatBoostClassifier:\n",
      "Accuracy: 0.9865\n",
      "Precision: 0.9831\n",
      "Recall: 0.9900\n",
      "F1 Score: 0.9865\n"
     ]
    }
   ],
   "source": [
    "# Evaluation Metrics\n",
    "print(\"Evaluation Metrics for CatBoostClassifier:\")\n",
    "\n",
    "# Accuracy\n",
    "accuracy_catboost = accuracy_score(y_test, y_pred_catboost)\n",
    "print(f\"Accuracy: {accuracy_catboost:.4f}\")\n",
    "\n",
    "# Precision\n",
    "precision_catboost = precision_score(y_test, y_pred_catboost)\n",
    "print(f\"Precision: {precision_catboost:.4f}\")\n",
    "\n",
    "# Recall\n",
    "recall_catboost = recall_score(y_test, y_pred_catboost)\n",
    "print(f\"Recall: {recall_catboost:.4f}\")\n",
    "\n",
    "# F1 Score\n",
    "f1_catboost = f1_score(y_test, y_pred_catboost)\n",
    "print(f\"F1 Score: {f1_catboost:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "905af24c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:53.718529Z",
     "iopub.status.busy": "2025-01-29T14:48:53.718251Z",
     "iopub.status.idle": "2025-01-29T14:48:53.888848Z",
     "shell.execute_reply": "2025-01-29T14:48:53.888103Z"
    },
    "papermill": {
     "duration": 0.187344,
     "end_time": "2025-01-29T14:48:53.890299",
     "exception": false,
     "start_time": "2025-01-29T14:48:53.702955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Confusion Matrix:\n",
      "[[983  17]\n",
      " [ 10 990]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "conf_matrix_catboost = confusion_matrix(y_test, y_pred_catboost)\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(conf_matrix_catboost)\n",
    "\n",
    "# Visualizing the Confusion Matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_catboost, annot=True, fmt='d', cmap='Blues', xticklabels=['Legitimate', 'Phishing'], yticklabels=['Legitimate', 'Phishing'])\n",
    "plt.title('Confusion Matrix for CatBoost')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "194bcf96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:53.922262Z",
     "iopub.status.busy": "2025-01-29T14:48:53.922002Z",
     "iopub.status.idle": "2025-01-29T14:48:53.930285Z",
     "shell.execute_reply": "2025-01-29T14:48:53.929476Z"
    },
    "papermill": {
     "duration": 0.025158,
     "end_time": "2025-01-29T14:48:53.931487",
     "exception": false,
     "start_time": "2025-01-29T14:48:53.906329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Model  Accuracy  Precision  Recall  F1 Score\n",
      "0  Logistic Regression    0.9510     0.9457   0.957    0.9513\n",
      "1        Random Forest    0.9855     0.9860   0.985    0.9855\n",
      "2        Decision Tree    0.9640     0.9612   0.967    0.9641\n",
      "3    Gradient Boosting    0.9790     0.9809   0.977    0.9790\n",
      "4               Tabnet    0.9365     0.9619   0.909    0.9347\n",
      "5   CatBoostClassifier    0.9865     0.9831   0.990    0.9865\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Create a dictionary of evaluation metrics\n",
    "model_comparison = {\n",
    "    \"Model\": [\"Logistic Regression\", \"Random Forest\", \"Decision Tree\", \"Gradient Boosting\", \"Tabnet\", \"CatBoostClassifier\"],\n",
    "    \"Accuracy\": [0.9510, 0.9855, 0.9640, 0.9790, 0.9365, 0.9865],\n",
    "    \"Precision\": [0.9457, 0.9860, 0.9612, 0.9809, 0.9619, 0.9831],\n",
    "    \"Recall\": [0.9570, 0.9850, 0.9670, 0.9770, 0.9090, 0.9900],\n",
    "    \"F1 Score\": [0.9513, 0.9855, 0.9641, 0.9790, 0.9347, 0.9865]\n",
    "}\n",
    "\n",
    "# Convert to DataFrame\n",
    "df_comparison = pd.DataFrame(model_comparison)\n",
    "\n",
    "# Display the table\n",
    "print(df_comparison)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "88556ed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:53.962529Z",
     "iopub.status.busy": "2025-01-29T14:48:53.962293Z",
     "iopub.status.idle": "2025-01-29T14:48:54.906134Z",
     "shell.execute_reply": "2025-01-29T14:48:54.905293Z"
    },
    "papermill": {
     "duration": 0.961537,
     "end_time": "2025-01-29T14:48:54.908167",
     "exception": false,
     "start_time": "2025-01-29T14:48:53.946630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Set style\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "# Define the metrics and models\n",
    "metrics = [\"Accuracy\", \"Precision\", \"Recall\", \"F1 Score\"]\n",
    "models = df_comparison[\"Model\"]\n",
    "\n",
    "# Plot bar charts for each metric\n",
    "fig, axes = plt.subplots(2, 2, figsize=(14, 10))\n",
    "\n",
    "for i, metric in enumerate(metrics):\n",
    "    ax = axes[i // 2, i % 2]\n",
    "    sns.barplot(x=models, y=df_comparison[metric], palette=\"viridis\", ax=ax)\n",
    "    \n",
    "    # Formatting\n",
    "    ax.set_title(f\"Model Comparison - {metric}\", fontsize=14, fontweight='bold')\n",
    "    ax.set_ylabel(metric, fontsize=12)\n",
    "    ax.set_xlabel(\"Models\", fontsize=12)\n",
    "    ax.set_ylim(0.9, 1)  # Adjust the y-axis scale\n",
    "    ax.bar_label(ax.containers[0], fmt=\"%.4f\", label_type=\"edge\", fontsize=10, padding=3)\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "65dcb8dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:54.943260Z",
     "iopub.status.busy": "2025-01-29T14:48:54.943020Z",
     "iopub.status.idle": "2025-01-29T14:48:54.945776Z",
     "shell.execute_reply": "2025-01-29T14:48:54.945168Z"
    },
    "papermill": {
     "duration": 0.021272,
     "end_time": "2025-01-29T14:48:54.947056",
     "exception": false,
     "start_time": "2025-01-29T14:48:54.925784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import pickle\n",
    "\n",
    "# Save each trained model\n",
    "#pickle.dump(log_reg, open(\"logistic_regression.pkl\", \"wb\"))\n",
    "#pickle.dump(random_forest, open(\"random_forest.pkl\", \"wb\"))\n",
    "#pickle.dump(decision_tree, open(\"decision_tree.pkl\", \"wb\"))\n",
    "#pickle.dump(gradient_boosting, open(\"gradient_boosting.pkl\", \"wb\"))\n",
    "#pickle.dump(tabnet_model, open(\"tabnet.pkl\", \"wb\"))\n",
    "#pickle.dump(catboost_model, open(\"catboost.pkl\", \"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9a497ae5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:54.981358Z",
     "iopub.status.busy": "2025-01-29T14:48:54.981118Z",
     "iopub.status.idle": "2025-01-29T14:48:58.613449Z",
     "shell.execute_reply": "2025-01-29T14:48:58.612403Z"
    },
    "papermill": {
     "duration": 3.651271,
     "end_time": "2025-01-29T14:48:58.615168",
     "exception": false,
     "start_time": "2025-01-29T14:48:54.963897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting skops\r\n",
      "  Downloading skops-0.11.0-py3-none-any.whl.metadata (6.0 kB)\r\n",
      "Requirement already satisfied: huggingface-hub>=0.17.0 in /usr/local/lib/python3.10/dist-packages (from skops) (0.27.0)\r\n",
      "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from skops) (24.2)\r\n",
      "Requirement already satisfied: scikit-learn>=1.1 in /usr/local/lib/python3.10/dist-packages (from skops) (1.2.2)\r\n",
      "Requirement already satisfied: tabulate>=0.8.8 in /usr/local/lib/python3.10/dist-packages (from skops) (0.9.0)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (3.16.1)\r\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (2024.9.0)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (6.0.2)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (2.32.3)\r\n",
      "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (4.67.1)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.17.0->skops) (4.12.2)\r\n",
      "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.1->skops) (1.26.4)\r\n",
      "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.1->skops) (1.13.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.1->skops) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.1->skops) (3.5.0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.3->scikit-learn>=1.1->skops) (2.4.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.17.0->skops) (3.4.0)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.17.0->skops) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.17.0->skops) (2.2.3)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.17.0->skops) (2024.12.14)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.3->scikit-learn>=1.1->skops) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.3->scikit-learn>=1.1->skops) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17.3->scikit-learn>=1.1->skops) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17.3->scikit-learn>=1.1->skops) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17.3->scikit-learn>=1.1->skops) (2024.2.0)\r\n",
      "Downloading skops-0.11.0-py3-none-any.whl (146 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m147.0/147.0 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: skops\r\n",
      "Successfully installed skops-0.11.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install skops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4a22224b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T14:48:58.652878Z",
     "iopub.status.busy": "2025-01-29T14:48:58.652577Z",
     "iopub.status.idle": "2025-01-29T14:49:02.890877Z",
     "shell.execute_reply": "2025-01-29T14:49:02.889923Z"
    },
    "papermill": {
     "duration": 4.258552,
     "end_time": "2025-01-29T14:49:02.892307",
     "exception": false,
     "start_time": "2025-01-29T14:48:58.633755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Models saved successfully! Skops used for sklearn models, Joblib for others.\n"
     ]
    }
   ],
   "source": [
    "from skops.io import dump\n",
    "import joblib\n",
    "\n",
    "# Save models using skops (for standard sklearn models)\n",
    "dump(log_reg, \"logistic_regression.skops\")\n",
    "dump(random_forest, \"random_forest.skops\")\n",
    "dump(decision_tree, \"decision_tree.skops\")\n",
    "dump(gradient_boosting, \"gradient_boosting.skops\")\n",
    "\n",
    "# Save TabNet and CatBoost using joblib (skops has issues with them)\n",
    "joblib.dump(tabnet_model, \"tabnet.joblib\")\n",
    "joblib.dump(catboost_model, \"catboost.joblib\")\n",
    "\n",
    "print(\"Models saved successfully! Skops used for sklearn models, Joblib for others.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eeab6adf",
   "metadata": {
    "papermill": {
     "duration": 0.016794,
     "end_time": "2025-01-29T14:49:02.926658",
     "exception": false,
     "start_time": "2025-01-29T14:49:02.909864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1373456,
     "sourceId": 2280177,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30840,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 60.688767,
   "end_time": "2025-01-29T14:49:04.765794",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-29T14:48:04.077027",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
